Java Design Patterns : Behavioral

- Behavioral design patterns give you a way of designing codes to make it more simple, maintainable, and effective. 
- Understanding how design patterns work can improve your understanding of how to write really high quality object-oriented code. 
- Behavioral design patterns are about how objects assign responsibilities between each other. They're concerned with how objects are connected, how they communicate with each other, and how responsibilities are assigned between them. 
- There are two different types of behavioral design pattern, class patterns and objects patterns. You can think of the difference between class patterns and object patterns as the difference between is a and has a relationships. For example, a dog is an animal and a dog has a tail. 
- Class patterns are concerned with the is a relationships and object patterns are concerned with the has a relationships. 
- Behavioral class patterns are concerned with how classes share responsibilities between themselves. This is usually done with inheritance. 
- Behavioral object patterns are the most common type. These are about how different objects interact with each other. Sometimes they are a way to help different objects work together to perform a certain task. And sometimes they're about delegating requests to other objects. Behavioral objects patterns use composition instead of inheritance.

The Chain of Responsibility pattern - 

- If you have a situation where you have some code that needs to make a request, but you don't know until runtime which object will be handling that request, you might want to consider using the chain of responsibility pattern. 
- As a real world example, imagine someone is using a software application and they find a bug, they need to tell someone about it so that the bug will get fixed. So they raise a support ticket in an online support system. And that gets picked up by a live support worker. In some cases, the life support worker might be able to respond directly to the user. If it's just a case of answering a question or something, but as this is a bug in the software, they then need to tell the product manager about the bug and pass on the details to them. The product manager looks at the impact of the bug and they decide they want to prioritize getting it fixed. So they ask a developer to fix it. That developer is working on something else they don't have time to fix it, but they do know another developer who does have time so they pass it on to them. That developer is able to fix the bug, so the other person who does it. 
- In this situation the request to fix the bug spotted on this long chain, from the person who found it to the developer who fixed it. 
- This is the concept of the chain of responsibility pattern. 
- In Java Applications, the chain of responsibilities is used to pass along request to different objects until it finds the one that can handle it. 
- The main benefits of this pattern is that it decouples the sender of the request from the receiver. 
- Example of used cases for this in Java include, handling authentication where different types of authentication might be needed, servlet filters for processing HTTP requests and things like buttons and used interfaces, where the action taken when it's clicked depends on the context. 
- There are a few things to watch out for, when you're implementing the chain of responsibility button. 
- If it's not implemented correctly, it can lead to circular chains by the requests, just keep getting passed round in a circle to the same objects. 
- There's also a chance that the requests just never gets handled, and it can also be difficult to debug problems with this design. 
- Change of responsibility can lead say a quite confusing stack traces, and they can be quite confusing to follow. But if you do have a number of objects that could handle a certain requests and you want the right ones to be chosen dynamically. Then the chain of responsibility pattern is well worth considering.

Command Pattern - 

- Sometimes when writing software, you need to issue a request, but you might not know anything about what's being requested or what's receiving the request. 
- So let's think about a real world example. Imagine someone's written an app for buying and selling things online. So the app could be used by lots of different companies, selling different things. 
- One example might be a restaurant using it to allow customers to order food online. Another company might use it for selling clothes online. 
- In both cases, the user journey is pretty much the same. The customer's browsing online and they decide they want to order something. So they input their order into the app and that information gets passed from the app to the company, but when the app is being written, we can't say explicitly that the customer might want to order pizza or order a pair of shoes. 
- What exactly they're ordering is down to the different companies using the app. 
- We also don't know what will happen after the order is sent. So there might be an immediate response saying the order is on its way, or there might be some checks to see if the orders in stock, or there might be a reply saying that your order will arrive in a month. 
- The command pattern is a way of making requests when you don't know anything about what's exactly is being requested or what exactly is receiving it. 
- It does this by encapsulating the request inside an object. 
- This might seem a bit counterintuitive to develop this used to object-oriented design. 
- Normally a command is something you would put in a method, not a class, but this is a useful way of decoupling the objects that invokes the command from the objects that knows how to handle it and perform that command. 
- So the command pattern is especially useful for commands that you might want to perform later on. 
- For example, they are sometimes used to support, undo and redo operations and things like queuing or logging requests to be performed at different times.

Interpreter Pattern - 

- Imagine a scenario, where two people are trying to communicate but they don't speak the same language. 
- A translator or an interpreter can join them and translates everything they say to each other. 
- The interpreter pattern is a way of translating one language into another. 
- So if you think of Google translate for example, it takes the input language and interprets it into a new language. 
- There are many different and varied scenarios where the interpreter pattern might be used. 
- It could be used to write custom regular expressions or writes your own compiler or translate human languages or parsers SQL, or just create a simple calculator. 
- The idea of the interpreter pattern in Java is that if the same problem keeps coming up, then you can express that problem as a sentence and interpret it. 
- The interpreter defines a grammar for the language and then used as an abstract syntax tree to interpret it. 
- This is quite a complicated concept so let's see what it actually looks like. 
- The first components in the interpreter pattern is the context. If you were translating a sentence into another language, the context would be the sentence. So the context is often just a string. 
- The next part is an abstract expression class. This is an interface or an abstract class that defines a method used for interpreting the context. 
- Each time there's interpret method is called, the context has changed in some way. 
- There are two different possible implementations of the abstract expression, terminal and non-terminal. 
- A non-terminal expression cause the interpret method, which alters the context, and then it passes the context onto another expression until it reaches the terminal expression. 
- A terminal expression is the last time the interpret method gets called. 
- And finally, there is a client which will create instances of expressions to interpret the context. 
- This structure makes it easy to extend and implement the grammar. 
- However, the interpreter pattern works best when the grammar being interpreted is simple. Complex grammars can be difficult to maintain because you would need a new expression class for every new rule you introduce.
- What are the components of the Interpreter pattern? - client, context, and expression

Iterator Pattern - 

- You've probably come across and used the Iterator Pattern in Java quite a lot. In fact, maybe even more than you realize. 
- If you've ever used Collections, which you probably have, it's likely you've used the Iterator Pattern extensively. 
- This for-each loop is commonly used in Java to iterate over a collection of objects. And under the hood is actually using The Iterator Pattern. 
- The Collection Interface implements another interface called Iterable, which is what the for-each loop is using. 
- One of the benefits of the Iterator Pattern is that it doesn't matter what type of collection the Sentence object is. It could be an ArrayList or a HashSet, or a LinkedBlockingQueue, or whatever. 
- As long as there's something that implements the Collection Interface. The for-each loop, works the same on all of them. 
- And it's irrelevant what the underlying structure looks like. So say I have a list, or collection, like this list of countries here for example. I might want to traverse this list, and access the items in it in some app that I'm making. And there might be different ways I want to traverse it. For example, I might want to cut out all of the countries in Africa, or all of the countries with a certain population size, and so on. I could add a load of methods to the List class to sort through the list in different ways. But I don't want to just add them all in there, because it will turn into one big class with loads of stuff in. I also don't know yet which kinds of iteration I need, so I might end up including loads of unused code. So this is where the Iterator comes in instead. 
- The Iterator, is a separate object that takes all of the responsibility for moving along the list, and accessing the objects inside it. 
- It's responsible for keeping track of which elements have already been traversed. 
- So to summarize, the Iterator Pattern provides a way to access the items in a list or collection of some type, without exposing the underlying structure. 
- In Java, there are interfaces called Iterable And Iterator, which do a lot of the heavy lifting for you, if you want to use this pattern. But it's also important to know how it works because you might want to write your own custom iterators.

Mediator Pattern - 

- definition of a mediator is someone who tries to make people in conflict, come to an agreement. 
- They act as a neutral party who sits in between all of the others so that they don't speak to each other directly. 
- In Java, the mediator pattern is a way for objects to communicate so that they are loosely coupled. 
- As a real life example, imagine a restaurant, the customer is at their table and they need to communicate what they want to eat. The chefs are in the kitchen and they need to know what to cook. And then the meal needs to be brought out. The owner of the restaurant needs to make a profit to run the restaurant. So money needs to be collected from the customers. 
- Imagine how it would work if there was no waiter or waitress. The customer would have to go to the kitchen to tell the chefs what they want. Then the chefs would have to bring out the food and at the end of the meal, the owner would have to come into the restaurant to collect the payments. 
- In this scenario, a waiter or waitress is like a mediator handling all of these interactions so that these groups of people don't have to interact with each other directly. 
- So if we go back to coding in object oriented design, you often end up with large applications that have lots of different objects. 
- We're taught that classes should be small and self contained. So you often have lots of different ones which leads to lots of different objects. This is good it means that each class is focused on it's one thing and the behavior of the application as a whole is split into small chunks. 
- But one of the downsides that can occur is that you end up with a system with lots of different objects that all know about each other and are all interconnected. 
- You might even end up with a situation where every object knows about every other objects. 
- Apart from the fact that it might become a nightmare to understand what's actually going on, this leads to tight coupling between objects and changes to one might result in the need for changes to another. 
- It might also make it difficult to reuse objects because they might have to communicate with so many others. 
- The idea of the mediator pattern is to have an object that's sole purpose is to handle these interactions between all of the different objects. 
- It sits in the middle of them all and handles the communications between them. This provides a loose coupling between the objects and this makes the program simpler to understand and to maintain.

Memento Pattern - 

- Say you want to create an undo operation and to do that, you need to save the states of an object but you don't want to break the principle of encapsulation. The memento pattern allows you to do exactly this. 
- There are some cases where you need to keep a record of the states of an object. For example, say you're writing the text documents and at some point you click save and then you reword what you've written. But later you decide you want to go back to the previous version. 
- You would need to have a record of the state that document was in before you saved it. 
- This is what the memento pattern does. It externalizes the state of an object at a given time in case he needs to get back to it later. 
- But the main challenge is how you do this without breaking encapsulation. 
- One of the benefits of encapsulation is that it's ensures objects hide their states from other objects. Classes often contain several fields that should be kept in a consistent state. If they're encapsulated, it prevents anyone else using the object from messing with that states. 
- Encapsulation also means you can change the underlying structure of the objects without causing breaking changes for anything else using it. 
- So in the memento pattern you create a copy of that state in a separate object. 
- First of all, you have an object whose states are going to be changing and this is called the originator. 
- Then you have the object which is going to be changing it called the caretaker. 
- The momento object sits between these two. 
- So the objects during the changing has access to the memento, which provides the save states. 
- The implementation of the originator stays as a black box. The momentum just knows what the state was at a given time. 
- It's worth bearing in mind that if the object whose states you want to capture contains a lot of data, using the memento pattern can result in an increase in memory usage. And this might outweigh the benefits of using it. But if the object state is fairly simple and you want to wait to be able to save it and restore it later, the momento pattern is a good way to do this without exposing the structure of the objects.

Observer Pattern - 

- The observer pattern is all about objects watching or observing other objects. 
- In object-oriented design, you often end up with a system broken up into lots of classes that work together. One of those challenges is making those classes interact and cooperate while avoiding tight coupling between them. 
- The observer pattern provides a way to do this. You have an object that's being watched called the subject or the observable and then you have the observers, which watch the object. 
- As a real-life example, think about sites where you're connected to people or fellow people, like on LinkedIn, Facebook, Twitter, Instagram and so on. You'll see their activity in your feed or if you post something, rather than sitting and watching to see if anyone comments, you will receive a notification if someone does. 
- In this example, the post is the observable and you are the observer. 
- The observer pattern is quite a common pattern in Java applications. You would use it when you have one or more objects that need to be notified of changes made by another object and updated accordingly. 
- For example, if you have a graphical user interface that shows several different types of charts, you would want them all to update when the data is updated. 
- Other examples could include a user interface where you have a button and when it's clicked, parts of the interface have to be updated. 
- Or for example, you have an application that has a list of people on a waiting list for a product to be in stock and they all need to be notified when it becomes available. 
- In Java, you may have come across classes called observer and observable, which have been commonly used to implement the observer pattern in Java. However, these were deprecated in Java 9 and are no longer recommended for use. One of the problems was that they could be used to tell you that something had changed but they didn't give you any details about what had changed. Instead, it's recommended to implement the observer pattern with a PropertyChangeListener and PropertyChangeSupport classes, which is what I'll be using in the following example.

State Pattern - 

- Sometimes you will have an object that needs to behave differently depending on its internal states. 
- The state pattern allows the object to alter its behavior when its state changes. 
- Imagine a play or pause button on a media player. If someone clicks the play button, what happens will depend on the state of the media player. For example, it could be already playing, or paused, or rewinding, and so on. 
- If you write a media play in Java, you might end up with loads of if statements about the state of the player. For example, you'd check if it was playing and then have the code to handle that scenario, and then check if it was paused and then have some code to handle that scenario, and so on. This can get quite lengthy and complex. 
- You'd also need these long if statements at every method you created, so in the pause method, and the rewind method, and so on, as well as the play method. 
- The state pattern provides a better solution to this problem. The state is separated out as a separate object from the clients. Usually there is an interface for states and then concretes implementations for different states. 
- So for example, in the media player example, the media play itself would be the clients, and then there would be a concrete implementation of state for going into stopped or playing, and so on. 
- Any of the operations performed by the clients that depend on the state of it are handled by these concrete implementations of the state's interface. 
- So the state pattern is a way of avoiding huge if/else blocks or switch statements. And in this way, it can help simplify the code. 
- The state pattern allows an object to change its behavior when its internal state changes.

Strategy Pattern - 

- Say you have a group of algorithms and you want to choose which one to use dynamically at runtime. 
- In the strategy pattern, the word strategy usually refers to an algorithm, and it allows you to do just this, to define a family of algorithms and make them interchangeable. 
- As a real life example, say you have a video game, and the person you're controlling has different powers they can use. For example, they can fly, they can climb things, they can swim, and so on. The action the player takes or the strategy they use will depend on the situation they find themselves in during the game. They'll need to decide dynamically which one to use. 
- This is a bit like how the strategy pattern works. 
- In Java, there are many different scenarios where you might use the strategy pattern. For example, if you want to encrypt files, but have different ways of encrypting them depending on the situation, or if you have different types of validation that you could use or different sorting algorithms that you want to use, or want to save to different file types, and so on. 
- This is quite a common pattern in Java, and it's relatively simple to implement. 
- The structure of the strategy pattern is fairly straightforward. You would have the context, which maintains a reference to the strategy objects. 
- The strategy is usually defined as an interface, and then there are different concrete implementations for the different strategies. 
- This is cleaner than having all of the strategies defined inside the client, and allows them to be used interchangeably at runtime. 
- Since this pattern was first described by the Gang of Four, new features in Java have been implemented which make this pattern even simpler to implement. With the use of Java 8 features, such as lambdas and static methods in functional interfaces, we can actually remove the need for the concrete implementations of the interface altogether.

Template Pattern - 

- The template method pattern is all about defining the common steps in an algorithm and a superclass and redefining some of those steps in a subclass. 
- This is actually one of the most commonly used design patterns. 
- As a real life example, imagine there's a recipe for making lasagna. The recipe defines a set of steps which you follow to cook the lasagna, but there might be alternative versions with different fillings. 
- For example, there might be a beef mince lasagna recipe, a vegetable lasagna recipe, or a lentil lasagna recipe, and they might also have different methods for making things like the white sauce. 
- Some of the steps might be the same for every lasagna, for example, constructing the lasagna and cooking it in the oven. 
- In code, you would define the steps for making a lasagna in an abstract class, for example, with methods for making the filling, making the white sauce, and baking the lasagna. 
- The instructions for baking the lasagna will be the same for all of them, so that would go in the abstract class, but the instructions for making the filling and the white sauce could be different for each, so these steps are defined in here but implemented differently in each of the subclasses. 
- This pattern is fairly common in frameworks, but there are some reasons why not everyone is a fan of the template method pattern. It can be difficult to communicate to users of the framework what the intent is. 
- If you came across a use of the template method pattern, it might not be immediately obvious which parts are meant to be changed. It can also be quite difficult to follow the flow of the program, as the functionality can jump between different classes. 
- However, it is a useful pattern to know, as it is commonly used, and it can be useful when you want to implement the common parts of an algorithm once and leave the varying parts to subclasses. In particular, if you find that you have classes which duplicate the same code, you might be able to refactor some of those steps out into an abstract class.

Visitor Pattern - 

- Say you have a tree of objects, and you want to perform an operation on all the elements of it. 
- The visitor pattern allows you to do this without making changes to the elements themselves. Instead, a separate visitor object is passed to each object to perform the operation. 
- As a real world analogy, imagine someone drives a car to a mechanic's. The mechanics temporarily take over the car to fix some things, and then the car is driven away again. The mechanics might do different kinds of fixes depending on the problem. There also might be different kinds of vehicles, such as trucks and buses and so on. The different fixes might be similar for each different type of vehicle, but also slightly different. 
- In a Java program, let's say you have an interface with some concrete implementations of it, and let's say you want to apply some operation to each of the concrete implementations. The operation will be similar but slightly different for each concrete element. One option would be to put a method for the operation inside each element, but that gives you a structure that's difficult to understand and make changes to. The other option is to use the visitor pattern. 
- In this version, you create an interface that defines a visit method for each of the concrete implementations. Then you have concrete implementations of the visitor interface. The visitors have a method called visit, and the concrete elements have a method called accept, which accepts a visitor. 
- In particular, the visitor pattern is useful if you also have a composite, or a list of the other elements. For example, say you have a third implementation of the element interface, which contains a list of other types of elements. This is known as the object structure. 
- The visitor pattern allows you to apply operations to each element in the list without worrying about type safety, because each will have its own separate visit method defined that performs the operation differently for each type. 
- It's worth noting that the visitor pattern is best used when the elements are not likely to change. If you were to start adding more elements to the concrete implementations, you would have to go back and update the visitor interface as well as every concrete implementation of it. This inflexibility is one of the downsides of using the visitor pattern. 
- It's also fairly rare to see this pattern used, partly because it's so complex and partly because it's a very specific use case. But if you do have this use case, but you want to define new operations without making changes to the existing object structure, the visitor pattern can offer a neat and elegant solution. 
- It makes good use of the open-closed principle, meaning that the classes are open for extension, but closed for modification.