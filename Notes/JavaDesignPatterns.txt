Java Design Patterns : Creational

What is a Design Pattern?

- A design pattern is a way of structuring code to solve a specific problem
- You don't need to know complex code
- Design patterns were invented by the Gang of Four 
    - Erich Gamma
    - Richard Helm
    - Ralph Johnson
    - John Vlissides
- Way of reusing other people's knowledge
- Similar to a recipe
- Save time
- Not specific to a type of application
- Guidelines, not content
- Useful for writing and refactoring existing Java code

Creational Design Pattern 

- Used to abstract the process of instantiating objects
- Used in scenarios when a system should not be dependent on how objects are created
- For example, a game for building houses
- patterns encapsulates the code for creating objects
- They become more important as systems become more complex
- Consider using an interface
- Creational design patterns are about defining a small subset of behaviors that can be used for the basis of lots more complex behaviors
- There are two main themes that are common to most creational design patterns. 
    - The first is that they encapsulate knowledge about which concrete class the system should use. 
    - The second is that they conceal how objects are created and put together. 
    
    Abstracting this information makes the code much more flexible. The system is much less constrained by what gets created, how it gets created and when it gets created. 
    Sometimes there are situations where a number of different creational design patterns could be used in a single situation. In a sense, the designs are competing in these instances. 
    At other times, it might be possible to use multiple patterns because they work well together and complement each other.

The Builder Pattern
- Purpose - to avoid complex constructors (with large no. of parameters)
- Long list of parameters are confusing 
- Sometimes not all info is needed, but still need to pass info
- to fix this we can have multiple constructors with diff no. of parameters. 
- This technique is called the 'telescoping constructor' pattern. 
- problem with this technique - class ends up having a large no. of constructors
                              - code becomes very long as no. of constructors would be permutations and combination of parameters
                              - for 8 parameters = 254 different constructors
- So, Builder pattern is the way to fix this problem
- It keeps all the flexibility of the telescoping approach but without the complexity. 
- It moves the construction of complex objects out of the constructor. 
- It also allows for different combinations of fields with one single construction process. 
- Classes that use the builder pattern scale much better and are far easier to read in this scenario.

- Builder Pattern has several components - 
    - Director - used for constructing object using builder
    - Builder 
    - Product - complex object that needs to be constructed\

- In classic Builder Pattern, the Builder class is actually an abstract interface.


Singleton Pattern
- When to use?
    - The Singleton pattern should be used when you want to make sure that only one instance of a class can be created. There might be times when you want to make it impossible to create multiple instances of a class while still making sure that there is a way to access that one instance.
    For Example - 
     window managers, 
     database connectors, 
     file managers, 
     resource accessors and spoolers

    - Say, for example, that you have a class that controls access to a resource like a printer. You might have multiple printers, but you would want to make absolutely sure that only one instance of the class that controls access to them could be created. If there are multiple print spoolers, they might try and allow two different processes access to the printer at the same time. Or say you had a logging class that needs to be used repeatedly by all the files in your project. Again, you would want to make sure that there was only one instance of that logging class. Having multiple instances might cause your program to give incorrect results, behave strangely, or crash. 

    - Examples of Singleton pattern in the Java application
        - the Desktop class, 
        - the System class, and 
        - the Runtime class. 

    - Every Java application has one, and only one, instance of Runtime, which can be accessed with the public method get Runtime. 

    - The Singleton pattern is perceived as one of the simpler creational design patterns and it is fairly straightforward to understand the concept, but it shouldn't be overused. 

    -     // synchronized is used when we want to prevent two resources using same instance at the same time
    // synchronized prevents two threads entering a method at the same time
    // It will not allow second thread to access this method till first method is still has access to it
    // It will lock it until it had finished
    // It can slow the program due to thread waiting
    // to improve this - instead of creating object inside getInstance() method, we can create it when we are declaring it. Also make it final
    // but its adviced to create object inside getInstance() method. As soon as class is loading, we will create an object will will be eager initialization. But in Java it is okay as Java works on lazy loading. 


Prototype Pattern
- involves making a copy of one original object. 
- It is useful when you want to create a new object, but a similar one already exists. 
- In particular, it should be used when you do not want a system to know details of how objects are created
- Say for example, there is an application that simulates a field of rabbits, and the while the application is running, the rabbits breed. Instead of creating a new rabbit object each time, it would be easier and more efficient to clone a single prototype rabbit. This technique is particular useful if creating a new rabbit object is a memory-intensive process. It can make the application faster, as well as make the code shorter and cleaner. 
-  This pattern should be used when the application using the cloned objects should not need to know about how an object is created. 
- It is also useful when classes are loaded dynamically. 
- For example, in an application that creates new rabbit objects as it runs, the rabbits are only created once the program has started running. This can slow the program down because new objects are being created all the time. But if the objects can be cloned, this will save memory. 
-  In the classic prototype pattern, there is an abstract prototype class that has a method called clone. 